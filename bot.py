import config
from datetime import datetime
import telebot
from telebot import types
import random
bot = telebot.TeleBot(config.TOKEN)

love = ["–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ª—é–±–æ–≤—å –≤—Å–µ–π —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –∑–µ—Ä–∫–∞–ª–æ.",
        "–¢–∞–∫–æ–π –≤–æ—Ç –ø–∞—Ä–∞–¥–æ–∫—Å: –º—ã —Å–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–≤–∏–≥–∏ –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É –¥–æ –Ω–∞—Å —É–∂–µ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –¥–µ–ª–∞, –∞ –ª—é–±—è—Ç –Ω–∞—Å —Ç–µ, –∫–æ–º—É –º—ã –Ω—É–∂–Ω—ã –∏ –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø–æ–¥–≤–∏–≥–æ–≤...",
        "–ù–µ—Ç –Ω–∏—á–µ–≥–æ —Ö—É–∂–µ, —á–µ–º –ª—é–±–∏—Ç—å –∫–æ–≥–æ-—Ç–æ, –∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ç–µ–±—è —Ä–∞–∑–æ—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å."
        ]
motivation = ["–ß–µ–º —É—Å–µ—Ä–¥–Ω–µ–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª–µ–µ —É–¥–∞—á–ª–∏–≤—ã–º –≤—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å",
              "–ù–µ—Ç –≤–æ–ª—à–µ–±—Å—Ç–≤–∞, —á—Ç–æ–±—ã –º–µ—á—Ç–∞ —Å—Ç–∞–ª–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ—à–∏–º–æ—Å—Ç–∏ –∏ —É–ø–æ—Ä–Ω–æ–≥–æ —Ç—Ä—É–¥–∞", 
              "–ë–æ–≥–∞—Ç—Å—Ç–≤–æ –ª–∏—à–∏–ª–æ –º–Ω–æ–≥–∏—Ö –ª—é–¥–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∏–≥–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å"
              ]
career = ["–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–µ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –ø–æ—ç—Ç–æ–º—É –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Ç–æ, –∫–∞–∫ —Ç—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—à—å —Å–≤–æ—é –∫–∞—Ä—å–µ—Ä—É.",
          "–ö–∞—Ä—å–µ—Ä–∞ ‚Äî —á—É–¥–µ—Å–Ω–∞—è –≤–µ—â—å, –Ω–æ –æ–Ω–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≥—Ä–µ—Ç—å –≤ —Ö–æ–ª–æ–¥–Ω—É—é –Ω–æ—á—å.",
          "–≠—Ç–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ç–æ –±—É–¥—É—â–µ–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Ö–æ—Ç–µ–ª–∞ –≤—ã–±—Ä–∞—Ç—å. –Ø –¥—É–º–∞—é, —á—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞, –∫–∞–∫ –≤ –±—Ä–∞–∫–µ, —Ç–∞–∫ –∏ –≤ –∫–∞—Ä—å–µ—Ä–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —è —ç—Ç–æ–≥–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞. –ù–æ –∏ —ç—Ç–æ ‚Äî –Ω–µ –ø–ª–æ—Ö–æ–µ –±—É–¥—É—â–µ–µ. –ò —è –Ω–µ –±–æ—é—Å—å –µ–≥–æ."
          ]

def start_markup():
    markup = telebot.types.InlineKeyboardMarkup(row_width = True)
    link_keyboard1 = types.InlineKeyboardButton(text="1-–π –∫–∞–Ω–∞–ª", url = "https://t.me/psyloging")
    link_keyboard2 = types.InlineKeyboardButton(text="2-–π –∫–∞–Ω–∞–ª", url = "https://t.me/abobusmusic")
    check_keyboard = types.InlineKeyboardButton(text ="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏‚úÖ", callback_data= "check")

    markup.add(link_keyboard1,link_keyboard2,check_keyboard)
    return markup

def options_markup():
    markup2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–õ—é–±–æ–≤—å üíã")
    item2 = types.KeyboardButton("–ú–æ—Ç–∏–≤–∞—Ü–∏—è üí™üèº")
    item3 = types.KeyboardButton("–ö–∞—Ä—å–µ—Ä–∞ üìà")

    markup2.add(item1,item2,item3)
    return markup2

def back_markup():
    markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–∞–∑–∞–¥ üîô")

    markup3.add(item1)
    return markup3

@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç, <b> {0.first_name}!</b>\n\n–Ø, {1.first_name}, –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —Ü–∏—Ç–∞—Ç–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ñ–µ—Ä—ã.\n<i>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:</i>".format(message.from_user, bot.get_me()), parse_mode='HTML', reply_markup=start_markup())

def check(call):
    status = ['creator', 'administrator', 'member']
    for i in status:
        if i == bot.get_chat_member(chat_id="-1001549436852", user_id=call.message.chat.id).status:
            check2(call)
            break

    else:
        bot.send_message(call.message.chat.id,"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!", reply_markup=start_markup())

def check2(call):
    status = ['creator', 'administrator', 'member']
    for i in status:
        if i == bot.get_chat_member(chat_id="-1001549345531", user_id=call.message.chat.id).status:
            bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
            hi(call)
            break

    else:
        bot.send_message(call.message.chat.id,"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!", reply_markup=start_markup())

def hi(call):
    bot.send_message (call.message.chat.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup = options_markup())

def sample_responses(message):
    user_message = str(message).lower()

    if user_message in ("–ü—Ä–∏–≤–µ—Ç", "–ü—Ä–∏–≤–µ—Ç!", "–ü—Ä–∏–≤"):
        return "–ü—Ä–∏–≤–µ—Ç!"
    
    if user_message in ("–ö—Ç–æ —Ç—ã?", "–ß—Ç–æ —Ç—ã –∑–∞ –±–æ—Ç?"):
        return ("–ü—Ä–∏–≤–µ—Ç, —è –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –±–æ—Ç")
    
    if user_message in ("–í—Ä–µ–º—è?", "–í—Ä–µ–º—è"):
        now = datetime.now()
        date_time = now.strftime("%d/%m/%y, %H:%M:%S")
        return str(date_time)

@bot.message_handler(content_types = ['text'])
def callback_call(message):
    if message.text == "–õ—é–±–æ–≤—å üíã":
        msg = random.choice(love)
        bot.send_message(message.chat.id, msg)
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë? –í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–±–æ–π —Ç–µ–º—É!")
    elif message.text == "–ú–æ—Ç–∏–≤–∞—Ü–∏—è üí™üèº":
        msg1 = random.choice(motivation)
        bot.send_message(message.chat.id, msg1)
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ? –í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–±–æ–π —Ç–µ–º—É!")
    elif message.text == "–ö–∞—Ä—å–µ—Ä–∞ üìà":
        msg2 = random.choice(career)
        bot.send_message(message.chat.id, msg2)
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ? –í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–±–æ–π —Ç–µ–º—É!")
    else:
        bot.send_message (message.chat.id,"–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æü•≤\n –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Å—Ñ–µ—Ä—É –∏ —è –≤—ã—à–ª—é —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—É –Ω–∞ —ç—Ç—É —Ç–µ–º—É!", reply_markup = options_markup())

@bot.callback_query_handler(func = lambda call: True)
def callback(call):
    if call.data == 'check':
        check(call)
    else:
        callback_call()


bot.polling(none_stop = True, interval= 0)
