import config
from datetime import datetime
import telebot
from telebot import types
import random
import locale

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

bot = telebot.TeleBot(config.TOKEN)

love = ["–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –ª—é–±–æ–≤—å –≤—Å–µ–π —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –∑–µ—Ä–∫–∞–ª–æ.",
        "–¢–∞–∫–æ–π –≤–æ—Ç –ø–∞—Ä–∞–¥–æ–∫—Å: –º—ã —Å–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–¥–≤–∏–≥–∏ –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É –¥–æ –Ω–∞—Å —É–∂–µ –Ω–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –¥–µ–ª–∞, –∞ –ª—é–±—è—Ç –Ω–∞—Å —Ç–µ, –∫–æ–º—É –º—ã –Ω—É–∂–Ω—ã –∏ –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø–æ–¥–≤–∏–≥–æ–≤...",
        "–ù–µ—Ç –Ω–∏—á–µ–≥–æ —Ö—É–∂–µ, —á–µ–º –ª—é–±–∏—Ç—å –∫–æ–≥–æ-—Ç–æ, –∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ç–µ–±—è —Ä–∞–∑–æ—á–∞—Ä–æ–≤—ã–≤–∞—Ç—å.",
        "–õ—é–±–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –Ω–æ –Ω–µ –ø—Ä–µ–≤—Ä–∞—â–∞–π—Ç–µ –ª—é–±–æ–≤—å –≤ —Ü–µ–ø–∏. –ü—É—Å—Ç—å –ª—É—á—à–µ –æ–Ω–∞ –±—É–¥–µ—Ç –≤–æ–ª–Ω—É—é—â–∏–º –º–æ—Ä–µ–º –º–µ–∂–¥—É –±–µ—Ä–µ–≥–∞–º–∏ –≤–∞—à–∏—Ö –¥—É—à.",
        "–Ø –ª—é–±–ª—é —Ç–µ–±—è. –Ø —Ç–µ–±—è –ª—é–±–ª—é. –Ø –º—ã—Å–ª–µ–Ω–Ω–æ –ø–æ—Å—ã–ª–∞—é —ç—Ç–∏ —Å–ª–æ–≤–∞ –∏–∑ —Å–≤–æ–∏—Ö –ø–∞–ª—å—Ü–µ–≤ –≤ –µ–≥–æ, –≤–≤–µ—Ä—Ö –ø–æ —Ä—É–∫–µ –ø—Ä—è–º–æ –≤ —Å–µ—Ä–¥—Ü–µ. –£—Å–ª—ã—à—å –º–µ–Ω—è. –Ø —Ç–µ–±—è –ª—é–±–ª—é.",
        "–ë–µ–∑ –ª—é–±–≤–∏ –∂–∏—Ç—å –ª–µ–≥—á–µ. –ù–æ –±–µ–∑ –Ω–µ—ë –Ω–µ—Ç —Å–º—ã—Å–ª–∞."
        ]
motivation = ["–ß–µ–º —É—Å–µ—Ä–¥–Ω–µ–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª–µ–µ —É–¥–∞—á–ª–∏–≤—ã–º –≤—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å",
              "–ù–µ—Ç –≤–æ–ª—à–µ–±—Å—Ç–≤–∞, —á—Ç–æ–±—ã –º–µ—á—Ç–∞ —Å—Ç–∞–ª–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é. –≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ—à–∏–º–æ—Å—Ç–∏ –∏ —É–ø–æ—Ä–Ω–æ–≥–æ —Ç—Ä—É–¥–∞", 
              "–ë–æ–≥–∞—Ç—Å—Ç–≤–æ –ª–∏—à–∏–ª–æ –º–Ω–æ–≥–∏—Ö –ª—é–¥–µ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–∏–≥–∞—Ç—å –º—É–¥—Ä–æ—Å—Ç—å",
              "–£—Å–ø–µ—Ö ‚Äì –Ω–µ –∫–ª—é—á –∫ —Å—á–∞—Å—Ç—å—é. –°—á–∞—Å—Ç—å–µ ‚Äì —ç—Ç–æ –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É. –ï—Å–ª–∏ –≤—ã –ª—é–±–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ, –≤—ã –±—É–¥–µ—Ç–µ –∏–º–µ—Ç—å —É—Å–ø–µ—Ö.",
              "–ï—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞–¥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏, —Ç–æ —ç—Ç–∏ —Ü–µ–ª–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –≤–∞—Å",
              "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –Ω–∞—á–∏–Ω–∞–π —Å —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∞–º—ã—Ö –±–æ–≥–∞—Ç—ã—Ö –ª—é–¥–µ–π. –ï—Å–ª–∏ —Ç–µ–±—è —Ç–∞–º –Ω–µ—Ç ‚Äì –±–µ—Ä–∏—Å—å –∑–∞ —Ä–∞–±–æ—Ç—É.",
              "–¢–æ—Ç, –∫—Ç–æ –∏—â–µ—Ç –º–∏–ª–ª–∏–æ–Ω—ã, –≤–µ—Å—å–º–∞ —Ä–µ–¥–∫–æ –∏—Ö –Ω–∞—Ö–æ–¥–∏—Ç, –Ω–æ —Ç–æ—Ç, –∫—Ç–æ –∏—Ö –Ω–µ –∏—â–µ—Ç, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –Ω–∏–∫–æ–≥–¥–∞.",
              "–£ –≤—Å—è–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —É –≤—Å–µ—Ö –≤–º–µ—Å—Ç–µ –µ—Å—Ç—å, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å, —Å—Ç—Ä–µ–º—è—Å—å –∫ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∏ –æ–¥–Ω–æ –∏–∑–±–∏—Ä–∞—é—Ç, –¥—Ä—É–≥–æ–≥–æ –∏–∑–±–µ–≥–∞—é—Ç.",
              "–î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –∏–∑ –Ω–∞—Å –æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ –≤–µ–ª–∏–∫–∞—è —Ü–µ–ª—å –∫–∞–∂–µ—Ç—Å—è –Ω–µ–¥–æ—Å—Ç–∏–∂–∏–º–æ–π –∏ –º—ã –µ–µ —É–ø—É—Å–∫–∞–µ–º, –∞ –≤ —Ç–æ–º, —á—Ç–æ –¥–æ—Å—Ç–∏–≥–∞–µ–º–æ–π –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ü–µ–ª—å —Å–ª–∏—à–∫–æ–º –º–µ–ª–∫–∞—è.",
              "–ë—É–¥—å –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–º. –Ø –≥–æ–≤–æ—Ä–∏–ª —Ç–µ–±–µ —ç—Ç–æ —É–∂–µ –¥–≤–∞–¥—Ü–∞—Ç—å —Ä–∞–∑. –ë—ã—Ç—å –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–º ‚Äî –æ–∑–Ω–∞—á–∞–µ—Ç —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞ –≤—ã—è—Å–Ω–∏—Ç—å –¥–ª—è —Å–µ–±—è, —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –≤ –∂–∏–∑–Ω–∏, –∏ —Ç–µ–º —Å–∞–º—ã–º –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–≤–æ—é —Ä–µ—à–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —ç—Ç–æ–≥–æ. –ê –ø–æ—Ç–æ–º –¥–µ–ª–∞—Ç—å –≤—Å–µ –æ—Ç —Ç–µ–±—è –∑–∞–≤–∏—Å—è—â–µ–µ –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ–ø–ª–æ—Ç–∏—Ç—å –≤ –∂–∏–∑–Ω—å —Å–≤–æ–µ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ç—ã –Ω–µ —Ä–µ—à–∏–ª—Å—è –Ω–∏ –Ω–∞ —á—Ç–æ, —Ç—ã –ø—Ä–æ—Å—Ç–æ-–Ω–∞–ø—Ä–æ—Å—Ç–æ –≤ —Å—É–º–∞—Ç–æ—Ö–µ –∏–≥—Ä–∞–µ—à—å —Å –∂–∏–∑–Ω—å—é –≤ —Ä—É–ª–µ—Ç–∫—É.",
              "–ú–µ–∂–¥—É —Å–æ–±—ã—Ç–∏–µ–º –∏ —Ä–µ–∞–∫—Ü–∏–µ–π –µ—Å—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <b>–°–í–û–ë–û–î–ê –í–´–ë–û–†–ê.</b>\n–≠—Ç–æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –∏ —Å–æ–∑–¥–∞–µ—Ç –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞."
              ]
career = ["–¢—ã –Ω–µ –º–æ–∂–µ—à—å –¥–µ—Ñ–∏–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏, –ø–æ—ç—Ç–æ–º—É –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ —Ç–æ, –∫–∞–∫ —Ç—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—à—å —Å–≤–æ—é –∫–∞—Ä—å–µ—Ä—É.",
          "–ö–∞—Ä—å–µ—Ä–∞ ‚Äî —á—É–¥–µ—Å–Ω–∞—è –≤–µ—â—å, –Ω–æ –æ–Ω–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≥—Ä–µ—Ç—å –≤ —Ö–æ–ª–æ–¥–Ω—É—é –Ω–æ—á—å.",
          "–≠—Ç–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Ç–æ –±—É–¥—É—â–µ–µ, –∫–æ—Ç–æ—Ä–æ–µ —è —Ö–æ—Ç–µ–ª–∞ –≤—ã–±—Ä–∞—Ç—å. –Ø –¥—É–º–∞—é, —á—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∏—Ç—å—Å—è —É—Å–ø–µ—Ö–∞, –∫–∞–∫ –≤ –±—Ä–∞–∫–µ, —Ç–∞–∫ –∏ –≤ –∫–∞—Ä—å–µ—Ä–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —è —ç—Ç–æ–≥–æ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∞. –ù–æ –∏ —ç—Ç–æ ‚Äî –Ω–µ –ø–ª–æ—Ö–æ–µ –±—É–¥—É—â–µ–µ. –ò —è –Ω–µ –±–æ—é—Å—å –µ–≥–æ."
          ]

def start_markup():
    markup = telebot.types.InlineKeyboardMarkup(row_width = True)
    link_keyboard1 = types.InlineKeyboardButton(text="1-–π –∫–∞–Ω–∞–ª", url = "https://t.me/psyloging")
    link_keyboard2 = types.InlineKeyboardButton(text="2-–π –∫–∞–Ω–∞–ª", url = "https://t.me/abobusmusic")
    check_keyboard = types.InlineKeyboardButton(text ="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏‚úÖ", callback_data= "check")

    markup.add(link_keyboard1,link_keyboard2,check_keyboard)
    return markup

def options_markup():
    markup2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width = 2, one_time_keyboard=True)
    item1 = types.KeyboardButton("–õ—é–±–æ–≤—å üíã")
    item2 = types.KeyboardButton("–ú–æ—Ç–∏–≤–∞—Ü–∏—è üí™üèº")
    item3 = types.KeyboardButton("–ö–∞—Ä—å–µ—Ä–∞ üìà")

    markup2.add(item1,item2,item3)
    return markup2

def back_markup():
    markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ù–∞–∑–∞–¥ üîô")

    markup3.add(item1)
    return markup3

@bot.message_handler(commands=["start"])
def start(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç, <b> {0.first_name}!</b>\n\n–Ø, {1.first_name}, –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —Ü–∏—Ç–∞—Ç–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å—Ñ–µ—Ä—ã.\n<i>–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:</i>".format(message.from_user, bot.get_me()), parse_mode='HTML', reply_markup=start_markup())

def check(call):
    status = ['creator', 'administrator', 'member']
    for i in status:
        if i == bot.get_chat_member(chat_id="-1001549436852", user_id=call.message.chat.id).status:
            check2(call)
            break

    else:
        bot.send_message(call.message.chat.id,"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!", reply_markup=start_markup())

def check2(call):
    status = ['creator', 'administrator', 'member']
    for i in status:
        if i == bot.get_chat_member(chat_id="-1001549345531", user_id=call.message.chat.id).status:
            bot.send_message(call.message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!")
            hi(call)
            break

    else:
        bot.send_message(call.message.chat.id,"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!", reply_markup=start_markup())

def hi(call):
    bot.send_message (call.message.chat.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup = options_markup())


@bot.message_handler(func = lambda message: message.text == '–ü—Ä–∏–≤–µ—Ç!')
@bot.message_handler(func = lambda message: message.text == '–ü—Ä–∏–≤–µ—Ç')
@bot.message_handler(func = lambda message: message.text == '–ø—Ä–∏–≤–µ—Ç')
def privet(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, <b>{0.first_name}!</b> –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?".format(message.from_user, bot.get_me()), parse_mode = 'HTML')

@bot.message_handler(func = lambda message: message.text == '–•–æ—Ä–æ—à–æ')
@bot.message_handler(func = lambda message: message.text == '—Ö–æ—Ä–æ—à–æ')
@bot.message_handler(func = lambda message: message.text == '–•–æ—Ä–æ—à–æ!')
@bot.message_handler(func = lambda message: message.text == '—Ö–æ—Ä–æ—à–æ!')
def privet(message):
    bot.reply_to(message, "–ú–æ–∏ —Ç–æ–∂–µ! –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã?.".format(message.from_user, bot.get_me()), parse_mode = 'HTML', reply_markup = start_markup())

@bot.message_handler(func = lambda message: message.text == '–∫—Ç–æ —Ç—ã')
@bot.message_handler(func = lambda message: message.text == '–ö—Ç–æ —Ç—ã')
@bot.message_handler(func = lambda message: message.text == '–ö—Ç–æ —Ç—ã?')
@bot.message_handler(func = lambda message: message.text == '–∫—Ç–æ —Ç—ã?')
def privet(message):
    bot.reply_to(message, "{0.first_name}, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Å—Ñ–µ—Ä—É.\n–ù–∞–¥–µ—é—Å—å, –º–Ω–µ —É–¥–∞—Å—Ç—Å—è —Ç–µ–±—è –ø–æ–¥–±–æ–¥—Ä–∏—Ç—å –∏–º–∏".format(message.from_user, bot.get_me()), parse_mode = 'HTML')

@bot.message_handler(commands=["time"])
def time(message):
    now = datetime.today()
    date = now.strftime("%d-%b-%Y")
    time = now.strftime("%H:%M:%S")
    bot.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è, –∑–∞ –æ–∫–Ω–æ–º " + date + " –∏ –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å " + time)

@bot.message_handler(content_types = ['text'])
def callback_call(message):

    if message.text == "–õ—é–±–æ–≤—å üíã":
        msg = random.choice(love)
        bot.send_message(message.chat.id, msg.format(message.from_user, bot.get_me()), parse_mode = 'HTML')
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë? –í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–±–æ–π —Ç–µ–º—É!", reply_markup = options_markup())
    elif message.text == "–ú–æ—Ç–∏–≤–∞—Ü–∏—è üí™üèº":
        msg1 = random.choice(motivation)
        bot.send_message(message.chat.id, msg1.format(message.from_user, bot.get_me()), parse_mode = 'HTML')
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ? –í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–±–æ–π —Ç–µ–º—É!", reply_markup = options_markup())
    elif message.text == "–ö–∞—Ä—å–µ—Ä–∞ üìà":
        msg2 = random.choice(career)
        bot.send_message(message.chat.id, msg2.format(message.from_user, bot.get_me()), parse_mode = 'HTML')
        bot.send_message(message.chat.id, "–•–æ—á–µ—à—å —É—Å–ª—ã—à–∞—Ç—å –µ—â–µ —á—Ç–æ-—Ç–æ? –í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—É –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–±–æ–π —Ç–µ–º—É!", reply_markup = options_markup())
    else:
        bot.send_message (message.chat.id,"–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æü•≤\n –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Å—Ñ–µ—Ä—É –∏ —è –≤—ã—à–ª—é —Ç–µ–±–µ —Ü–∏—Ç–∞—Ç—É –Ω–∞ —ç—Ç—É —Ç–µ–º—É!", reply_markup = options_markup())

@bot.callback_query_handler(func = lambda call: True)
def callback(call):
    if call.data == 'check':
        check(call)
    else:
        callback_call()

bot.polling(none_stop = True)
